{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  AntibanEnabled        := True; //Enables Most Antiban
  BreaksEnabled         := True; //Enables Short Breaks
  SleepEnabled          := True; //Enables Sleep Breaks
  RemoteInputEnabled    := True; //Enables Remote Input
  ProgressReportEnabled := True; //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging
end;

type
  ERSLogs = (REGULAR_LOGS, ACHEY_LOGS, OAK_LOGS, WILLOW_LOGS, TEAK_LOGS,
             ARCTIC_LOGS, MAPLE_LOGS, MAHOGANY_LOGS, YEW_LOGS, BLISTER_LOGS,
             MAGIC_LOGS, REDWOOD_LOGS);

var
  CurrentLogs: ERSLogs := ERSLogs.MAPLE_LOGS;

type
  EBurnerState = (
    WAIT_STATE,
    BURN_LOG,
    CHANGE_START,
    SMALL_STEP,
    OPEN_BANK,
    WITHDRAW_LOG,
    WITHDRAW_TOOL,
    CLOSE_INTERFACE,
    TELEPORT,
    WALK_SPOT,
    LEVEL_UP,
    CLOSE_CONTEXT,
    END_SCRIPT
  );

  TLogBurner = record(TBaseBankScript)
    State: EBurnerState;
    NextStartingPoint: TPoint;
    StartingPoints: TPointArray;

    Fire: TRSObject;
    Logs: TRSItem;
    Tool: TRSBankWithdrawItem;
    ToolSlot: Int32;
    BurnTimer: TCountDown;
    Material: TRSBankWithdrawItem;
  end;


procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.FIREMAKING, ERSSkill.TOTAL];
  Antiban.MinZoom := 15;
  Antiban.MaxZoom := 40;
end;

procedure TLogBurner.SetupLogs;
begin
  case CurrentLogs of
    ERSLogs.REGULAR_LOGS:  Logs := 'Logs';
    ERSLogs.ACHEY_LOGS:    Logs := 'Achey tree logs';
    ERSLogs.OAK_LOGS:      Logs := 'Oak logs';
    ERSLogs.WILLOW_LOGS:   Logs := 'Willow logs';
    ERSLogs.TEAK_LOGS:     Logs := 'Teak logs';
    ERSLogs.ARCTIC_LOGS:   Logs := 'Arctic pine logs';
    ERSLogs.MAPLE_LOGS:    Logs := 'Maple logs';
    ERSLogs.MAHOGANY_LOGS: Logs := 'Mahogany logs';
    ERSLogs.YEW_LOGS:      Logs := 'Yew logs';
    ERSLogs.BLISTER_LOGS:  Logs := 'Blisterwood logs';
    ERSLogs.MAGIC_LOGS:    Logs := 'Magic logs';
    ERSLogs.REDWOOD_LOGS:  Logs := 'Redwood logs';
  end;
end;

procedure TLogBurner.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'AIO Firemaker';

  inherited;

  RSW.Setup('x7789y2306');
  ScriptBank := @RSObjects.VarrockWestBank;

  Self.SetupLogs;
  Tool := ['Tinderbox', 1, False];
  Material := [Logs, BANK_WITHDRAW_ALL, False];

  StartingPoints := [[8241, 2732], [8241, 2736]];
  NextStartingPoint := StartingPoints[0];

  Fire := RSObjects.BurningFire;
  BurnTimer.Setup(30000);

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  if not Inventory.FindItem(Tool.Item, ToolSlot) then
    ToolSlot := -1;

  if ScriptDebugEnabled then
  begin
    DebugObjectArray += ScriptBank;
    DebugObjectArray += @Fire;
  end;
end;

function TRSMainScreen.GetPlayerFloorBox: TBox;
var
  A: Double := Minimap.GetCompassAngle(False);
  Center: TPoint := Minimap.Center;
  TPA: TPointArray;
begin
  TPA := [Minimap.VecToMS(Vec3(Center.X - 1, Center.Y, 3), A),
          Minimap.VecToMS(Vec3(Center.X + 1, Center.Y, -3), A)];

  Result := TPA.Bounds;
end;

procedure TLogBurner.ChangeStartingPoint;
begin
  if NextStartingPoint = StartingPoints[0] then
    NextStartingPoint := StartingPoints[1]
  else
    NextStartingPoint := StartingPoints[0];

  Fire.TileArray := PopulateTile(NextStartingPoint, [0, 0, 5, 5]);
end;

function TLogBurner.SmallStep: Boolean;
var
  Tile: TPoint;
  Tiles: TPointArray := PopulateTile(RSW.GetMyPos, [1, 1, 0, 0]);
begin
  for Tile in Tiles do
  begin
    Fire.TileArray := [Tile];
    if Fire.Find then
    begin
      RSW.WebWalk(Tile, 1, 0.2);
      Exit(True);
    end;
  end;
end;

function TLogBurner.WalkNextPoint: Boolean;
begin
  if Result := RSW.WebWalk(NextStartingPoint) then
     Self.ChangeStartingPoint;
end;

function TLogBurner.Teleport: Boolean;
begin
  if Magic.Open and not Magic.CanActivate(ERSSPell.VARROCK_TELEPORT) then
    Self.WalkNextPoint
  else if Magic.CastSpell(ERSSpell.VARROCK_TELEPORT) then
    Wait(1200);

  Result := WaitUntil(RSW.AtTile(NextStartingPoint, 40), 100, 9000);

  if Result then
    Wait(1200);
end;


function TLogBurner.Withdraw(Item: TRSBankWithdrawItem): Boolean;
var
  UseQuantityButton: Boolean := Item.Quantity <> 1;
  InvCount: Int32;
begin
  if BankTab = -1 then
    BankTab := Bank.FindItemTab(Item.Item);

  InvCount := Inventory.Count;
  if Result := Bank.WithdrawItem(BankTab, Item, UseQuantityButton) then
    WaitUntil(Inventory.Count > InvCount, 100, 3000);

end;

function TLogBurner.BurnLogs: Boolean;
var
  InvCount: Int32 := Inventory.CountItem(Material.Item);
begin
  WL.PreviousXP := XPBar.Read;
  if Inventory.Use(ToolSlot, Material.Item) then
  begin
    Wait(100);
    if InvCount > Inventory.CountItem(Material.Item) then
    begin
      if Inventory.FindItem(Material.Item) then
        Inventory.SetSelectedSlot(ToolSlot);
      BurnTimer.Restart(Random(-3000, 0));
      repeat
        Wait(100);
        if Chat.LeveledUp then
        begin
          Inventory.SetSelectedItem(ToolSlot);
          Mouse.Move(MainScreen.GetPlayerFloorBox);
          if MainScreen.IsUpText('ogs') then
            Mouse.Click(MOUSE_LEFT)
          else
            Break;
        end;
      until BurnTimer.IsFinished or XPBar.EarnedXP;
    end;
  end;
end;


function TLogBurner.GetState: EBurnerState;
var
  MyPos: TPoint;
begin
  if WL.Activity.IsFinished then
    Exit(EBurnerState.END_SCRIPT);

  if ChooseOption.IsOpen then
    Exit(EBurnerState.CLOSE_CONTEXT);

  if Chat.LeveledUp then
    Exit(EBurnerState.LEVEL_UP);

  if MainScreen.HasInterface then
  begin
    if Bank.IsOpen then
    begin
      if Inventory.FindItem(Tool.Item) and Inventory.FindItem(Material.Item) then
        Exit(EBurnerState.CLOSE_INTERFACE);
      if not Inventory.FindItem(Tool.Item) then
        Exit(EBurnerState.WITHDRAW_TOOL);
      if not Inventory.FindItem(Material.Item) then
        Exit(EBurnerState.WITHDRAW_LOG);
    end;

    Exit(EBurnerState.CLOSE_INTERFACE);
  end;

  if (Inventory.IsSlotUsed(ToolSlot) or Inventory.FindItem(Tool.Item, ToolSlot)) and Inventory.FindItem(Material.Item) then
  begin
    MyPos := RSW.GetMyPos;
    if MyPos.WithinDistance(ScriptBank^.TileArray, 10) then
      Exit(EBurnerState.TELEPORT);

    if Inventory.IsFull and not MyPos.WithinDistance(NextStartingPoint, 4) then
    begin
      if Fire.Find then
        Exit(EBurnerState.CHANGE_START);

      Exit(EBurnerState.WALK_SPOT);
    end;

    Exit(EBurnerState.BURN_LOG);
  end;

  Exit(EBurnerState.OPEN_BANK);
end;

procedure TLogBurner.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  repeat
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    case State of
      EBurnerState.WAIT_STATE: Wait(800, 850);
      EBurnerState.BURN_LOG: Self.BurnLogs;
      EBurnerState.CHANGE_START: Self.ChangeStartingPoint;
      EBurnerState.SMALL_STEP: Self.SmallStep;
      EBurnerState.OPEN_BANK: Bank.WalkOpen(ScriptBank);
      EBurnerState.WITHDRAW_LOG: Self.Withdraw(Material);
      EBurnerState.WITHDRAW_TOOL: Self.Withdraw(Tool);
      EBurnerState.CLOSE_INTERFACE: MainScreen.CloseInterface;
      EBurnerState.TELEPORT: Self.Teleport;
      EBurnerState.WALK_SPOT: Self.WalkNextPoint;
      EBurnerState.LEVEL_UP: Chat.HandleLevelUp(True);
      EBurnerState.CLOSE_CONTEXT: ChooseOption.Close;
      EBurnerState.END_SCRIPT: Break;
    end;

    Self.DoAntiban;
  until Self.ShouldStop;
end;

var
  LogBurner: TLogBurner;

function TRSInventory.IsSlotUsed(Slot: Int32): Boolean; override;
begin
  Result := (Slot > -1) and Self.Open() and Self.IsSlotUsed(Self.GetSlotBox(Slot));
end;

type
  TBurnerConfig = record(TScriptConfig)
    LogSelector: TLabeledCombobox;
  end;

procedure TBurnerConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentLogs := ERSLogs(LogSelector.Combobox.getItemIndex);
end;

procedure TBurnerConfig.Setup; override;
begin
  inherited;

  with LogSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Logs:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Regular');
    AddItem('Achey tree');
    AddItem('Oak');
    AddItem('Willow');
    AddItem('Teak');
    AddItem('Arctic pine');
    AddItem('Maple');
    AddItem('Mahogany');
    AddItem('Yew');
    AddItem('Blisterwood');
    AddItem('Magic');
    AddItem('Redwood');
    Combobox.setItemIndex(Ord(CurrentLogs));
  end;

  StartButton.setOnClick(@Self.StartScript);
end;

procedure TBurnerConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var
  BurnerConfig: TBurnerConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@BurnerConfig.Run);
  {$ENDIF}
  LogBurner.Run(MaxActions, MaxTime);
end.
